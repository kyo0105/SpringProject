<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 <mapper namespace="com.domino.mapper.NoticeMapper">
 
	<select id="selectList" resultType="NoticeVO">
		select * 
		from (SELECT rank() over(order by seq desc) pageseq, m.* 
			  FROM (select rank() over(order by notice_code) seq, notice.* from notice where type = #{ type } ) m ) t
		where pageseq between #{ begin } and #{ end } 
	</select>

	<select id="selectTotalRecords" resultType="int">
		select count(*) totalRecords from notice where type = #{ type }
	</select>	
	
	<select id="searchList" resultType="NoticeVO">
		select * 
		from (SELECT rank() over(order by seq desc) pageseq, m.*
			  FROM (select rank() over(order by notice_code) seq, notice.* from notice
				 	where type = #{ type }	<if test="searchCondition.equals('title')"> and regexp_like(title, #{ searchWord }, 'i') ) m </if>
											<if test="searchCondition.equals('content')"> and regexp_like(content, #{ searchWord }, 'i') ) m </if>
											<if test="searchCondition.equals('all')"> and (regexp_like(title, #{ searchWord }, 'i') or regexp_like(content, #{ searchWord }, 'i')) ) m </if>
			 ) t
		where pageseq BETWEEN #{ begin } AND #{ end }							  				  
	</select>

	<select id="searchTotalRecords" resultType="int">
		select count(*) totalRecords from notice where type = #{ type }
						<if test="searchCondition.equals('title')"> and regexp_like(title, #{ searchWord }, 'i') </if>
						<if test="searchCondition.equals('content')"> and regexp_like(content, #{ searchWord }, 'i') </if>
						<if test="searchCondition.equals('all')"> and (regexp_like(title, #{ searchWord }, 'i') or regexp_like(content, #{ searchWord }, 'i')) </if>
	</select>	
	
	<select id="selectView" resultType="NoticeVO">
		select rank() over (order by notice_code) seq, notice_code, title, notice_date, hits, content, type, emp_id
		from notice where type = #{type} order by seq desc
	</select>
	
	<select id="searchView" resultType="NoticeVO">
		select rank() over (order by notice_code) seq, notice_code, title, notice_date, hits, replace(content, chr(10), '') content, type, emp_id
		from notice where type = #{type}	<if test="searchCondition.equals('title')"> and regexp_like(title, #{ searchWord }, 'i') </if>
											<if test="searchCondition.equals('content')"> and regexp_like(content, #{ searchWord }, 'i') </if>
											<if test="searchCondition.equals('all')"> and (regexp_like(title, #{ searchWord }, 'i') or regexp_like(content, #{ searchWord }, 'i')) </if>
	</select>
	
	<select id="updateHits">
		update notice set hits = hits + 1 where notice_code = #{ notice_code }
	</select>
	
	<insert id="insert">
		insert into notice (notice_code, title, notice_date, hits, content, type, emp_id)
			   values (notice_seq.nextval, #{ title }, to_char(sysdate, 'YYYY-MM-DD'), 0, #{ content }, #{ type }, #{ emp_id })
	</insert>
	
	<delete id="delete">
		delete from notice where notice_code = #{ notice_code }
	</delete>
	
	<update id="update">
		update notice set title = #{ title }, content = #{ content }, emp_id = #{ emp_id } where notice_code = #{ notice_code }
	</update>
	
	<select id="selectOne" resultType="NoticeVO">
		select * from notice where notice_code = #{ notice_code }
	</select>
	
</mapper>